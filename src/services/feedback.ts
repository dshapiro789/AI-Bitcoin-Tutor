import { supabase } from '../lib/supabase';

export interface FeedbackSubmission {
  feedbackType: string;
  priorityLevel: string;
  title: string;
  description: string;
  rating: number;
  pollResponse?: string;
  contactEmail?: string;
  contactName?: string;
}

export interface FeedbackResponse {
  id: string;
  referenceNumber: string;
  feedbackType: string;
  priorityLevel: string;
  title: string;
  description: string;
  rating: number;
  pollResponse?: string;
  contactEmail?: string;
  contactName?: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export class FeedbackService {
  async submitFeedback(feedback: FeedbackSubmission): Promise<{ referenceNumber: string }> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      const feedbackData = {
        user_id: user?.id || null,
        feedback_type: feedback.feedbackType,
        priority_level: feedback.priorityLevel,
        title: feedback.title,
        description: feedback.description,
        rating: feedback.rating,
        poll_response: feedback.pollResponse || null,
        contact_email: feedback.contactEmail || user?.email || null,
        contact_name: feedback.contactName || null,
        reference_number: '', // Will be auto-generated by trigger
      };

      const { data, error } = await supabase
        .from('feedback')
        .insert(feedbackData)
        .select('reference_number')
        .single();

      if (error) {
        console.error('Feedback submission error:', error);
        throw new Error('Failed to submit feedback. Please try again.');
      }

      return { referenceNumber: data.reference_number };
    } catch (err) {
      console.error('Error submitting feedback:', err);
      throw err instanceof Error ? err : new Error('Failed to submit feedback');
    }
  }

  async getUserFeedback(): Promise<FeedbackResponse[]> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        throw new Error('User not authenticated');
      }

      const { data, error } = await supabase
        .from('feedback')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      return data.map(item => ({
        id: item.id,
        referenceNumber: item.reference_number,
        feedbackType: item.feedback_type,
        priorityLevel: item.priority_level,
        title: item.title,
        description: item.description,
        rating: item.rating,
        pollResponse: item.poll_response,
        contactEmail: item.contact_email,
        contactName: item.contact_name,
        status: item.status,
        createdAt: item.created_at,
        updatedAt: item.updated_at,
      }));
    } catch (err) {
      console.error('Error fetching user feedback:', err);
      throw err instanceof Error ? err : new Error('Failed to fetch feedback');
    }
  }

  async getFeedbackByReference(referenceNumber: string): Promise<FeedbackResponse | null> {
    try {
      const { data, error } = await supabase
        .from('feedback')
        .select('*')
        .eq('reference_number', referenceNumber)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return null; // Not found
        }
        throw error;
      }

      return {
        id: data.id,
        referenceNumber: data.reference_number,
        feedbackType: data.feedback_type,
        priorityLevel: data.priority_level,
        title: data.title,
        description: data.description,
        rating: data.rating,
        pollResponse: data.poll_response,
        contactEmail: data.contact_email,
        contactName: data.contact_name,
        status: data.status,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };
    } catch (err) {
      console.error('Error fetching feedback by reference:', err);
      throw err instanceof Error ? err : new Error('Failed to fetch feedback');
    }
  }
}

export const feedbackService = new FeedbackService();